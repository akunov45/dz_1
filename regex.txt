
Синтаксис понятия регулярки
 два способа создания регулярки

/pattern/flags 
pattern - это шаблон что мы ищем
flags - регулярном выражении — это токены, которые изменяют его поведение при поиске

let pattern = /Test/i
//-----------/pattern/flags 

Якоря 

(^, $, .)
^ - начало строки
$ - конец строки
. — найдет любой символ (один).

 Классы символов

(\s,\S,\d,\D,\w,\W) - есть много классов основные из них эти


\s пробел 
 \S не пробел 
  \d это цифры [0-9]
   \D не цифры 
    \w буквы и цифры _ 
     \W не буква и не цифры

     
флаги 

(i , g, m)

флаг i, который означает игнорирование регистра, выполняет поиск без учета регистра.
 флаг g, служит для расширения поиска, чтобы найти все совпадения 

Квантификаторы

(*, +, ?  {n},{n,}) - это специальные ограничители

* - означает что элемент будет 0 раз или несколько раз (повторение одного символа )
примеры 
/colou*r/.test("colour")
вхождением будут след.
color - тут 0 раз что нету ваще
colouuur - а тут u 3 раза повторно встречается

+ - он так же работает как и * но отличие в том что он должен хоть один раз или более
примеры
/colou+r/.test("colour")
вхождением будут след.
colour - вот он один раз - u встречается
colouuur - тут больше 1 раз 

? - этот озночает что поиск совпадений с повторением от нуля до одного раза
примеры
/colou?r/.test("colour")
вхождением будут след.
color - тут u не участвует и по этому мы можем найти
colour - тут участвует 1 раз  и эту тоже можем найти

дальше уже понятно будет
/colou{2}r/.test("colouur") u должен 2раза подряд
/colou{2,3}r/.test("colouuur") u должен либо 2 либо 3 раза подряд







